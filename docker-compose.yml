name: 'portfolio-project'

services:
  postgres:
    image: postgres:18
    container_name: my-postgres-container
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: "redis:8-alpine"
    container_name: my-redis-container
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  app:
    build: .
    image: my-portfolio-image
    container_name: my-portfolio-container
    command: /app/entrypoint.sh
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/postgres
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s = socket.socket(); s.connect(('localhost', 8000)); s.close()"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  celery:
    image: my-portfolio-image
    container_name: my-celery-container
    command: celery -A portfolio worker -E -l info
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: on-failure

  flower:
    image: my-portfolio-image
    container_name: my-flower-container
    command: celery -A portfolio flower --basic_auth=admin:snipher8431
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
      celery:
        condition: service_started
    restart: on-failure

  beat:
    image: my-portfolio-image
    container_name: my-beat-container
    command: celery -A portfolio beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: on-failure

volumes:
  postgres_data:
  redis_data: